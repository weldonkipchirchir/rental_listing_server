// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: notification.sql

package db

import (
	"context"
	"database/sql"
)

const createAdminNotification = `-- name: CreateAdminNotification :one
INSERT INTO notifications (admin_id, subject, sender_user_id, email, booking_id, message)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, message, read, created_at, subject, booking_id, email, admin_id, sender_admin_id, sender_user_id
`

type CreateAdminNotificationParams struct {
	AdminID      sql.NullInt32  `json:"admin_id"`
	Subject      sql.NullString `json:"subject"`
	SenderUserID sql.NullInt32  `json:"sender_user_id"`
	Email        sql.NullString `json:"email"`
	BookingID    int32          `json:"booking_id"`
	Message      string         `json:"message"`
}

func (q *Queries) CreateAdminNotification(ctx context.Context, arg CreateAdminNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createAdminNotification,
		arg.AdminID,
		arg.Subject,
		arg.SenderUserID,
		arg.Email,
		arg.BookingID,
		arg.Message,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Read,
		&i.CreatedAt,
		&i.Subject,
		&i.BookingID,
		&i.Email,
		&i.AdminID,
		&i.SenderAdminID,
		&i.SenderUserID,
	)
	return i, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, subject, sender_admin_id, email, booking_id, message)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, message, read, created_at, subject, booking_id, email, admin_id, sender_admin_id, sender_user_id
`

type CreateNotificationParams struct {
	UserID        sql.NullInt32  `json:"user_id"`
	Subject       sql.NullString `json:"subject"`
	SenderAdminID sql.NullInt32  `json:"sender_admin_id"`
	Email         sql.NullString `json:"email"`
	BookingID     int32          `json:"booking_id"`
	Message       string         `json:"message"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserID,
		arg.Subject,
		arg.SenderAdminID,
		arg.Email,
		arg.BookingID,
		arg.Message,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Read,
		&i.CreatedAt,
		&i.Subject,
		&i.BookingID,
		&i.Email,
		&i.AdminID,
		&i.SenderAdminID,
		&i.SenderUserID,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const getNotificationByID = `-- name: GetNotificationByID :one
SELECT id, user_id, message, read, email, created_at
FROM notifications
WHERE id = $1 AND user_id = $2
`

type GetNotificationByIDParams struct {
	ID     int32         `json:"id"`
	UserID sql.NullInt32 `json:"user_id"`
}

type GetNotificationByIDRow struct {
	ID        int32          `json:"id"`
	UserID    sql.NullInt32  `json:"user_id"`
	Message   string         `json:"message"`
	Read      sql.NullBool   `json:"read"`
	Email     sql.NullString `json:"email"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetNotificationByID(ctx context.Context, arg GetNotificationByIDParams) (GetNotificationByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getNotificationByID, arg.ID, arg.UserID)
	var i GetNotificationByIDRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Read,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getNotificationsByAdminID = `-- name: GetNotificationsByAdminID :many
SELECT n.id, n.admin_id, a.id, n.subject, n.booking_id, a.email, n.message, n.read, n.created_at
FROM notifications n
JOIN users a ON n.sender_user_id = a.id
WHERE n.admin_id = $1
ORDER BY n.created_at DESC
`

type GetNotificationsByAdminIDRow struct {
	ID        int32          `json:"id"`
	AdminID   sql.NullInt32  `json:"admin_id"`
	ID_2      int32          `json:"id_2"`
	Subject   sql.NullString `json:"subject"`
	BookingID int32          `json:"booking_id"`
	Email     string         `json:"email"`
	Message   string         `json:"message"`
	Read      sql.NullBool   `json:"read"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetNotificationsByAdminID(ctx context.Context, adminID sql.NullInt32) ([]GetNotificationsByAdminIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByAdminID, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotificationsByAdminIDRow
	for rows.Next() {
		var i GetNotificationsByAdminIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AdminID,
			&i.ID_2,
			&i.Subject,
			&i.BookingID,
			&i.Email,
			&i.Message,
			&i.Read,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationsByUserID = `-- name: GetNotificationsByUserID :many
SELECT n.id, n.user_id, a.id, n.subject, n.booking_id, a.email, n.message, n.read, n.created_at
FROM notifications n
JOIN admins a ON n.sender_admin_id = a.id
WHERE n.user_id = $1
ORDER BY n.created_at DESC
`

type GetNotificationsByUserIDRow struct {
	ID        int32          `json:"id"`
	UserID    sql.NullInt32  `json:"user_id"`
	ID_2      int32          `json:"id_2"`
	Subject   sql.NullString `json:"subject"`
	BookingID int32          `json:"booking_id"`
	Email     string         `json:"email"`
	Message   string         `json:"message"`
	Read      sql.NullBool   `json:"read"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetNotificationsByUserID(ctx context.Context, userID sql.NullInt32) ([]GetNotificationsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetNotificationsByUserIDRow
	for rows.Next() {
		var i GetNotificationsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ID_2,
			&i.Subject,
			&i.BookingID,
			&i.Email,
			&i.Message,
			&i.Read,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentNotificationsByAdminID = `-- name: GetSentNotificationsByAdminID :many
SELECT n.id, n.admin_id, n.subject, n.booking_id, a.email, n.message, n.read, n.created_at
FROM notifications n
JOIN users a ON n.user_id = a.id
WHERE n.sender_admin_id = $1
ORDER BY n.created_at DESC
`

type GetSentNotificationsByAdminIDRow struct {
	ID        int32          `json:"id"`
	AdminID   sql.NullInt32  `json:"admin_id"`
	Subject   sql.NullString `json:"subject"`
	BookingID int32          `json:"booking_id"`
	Email     string         `json:"email"`
	Message   string         `json:"message"`
	Read      sql.NullBool   `json:"read"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetSentNotificationsByAdminID(ctx context.Context, senderAdminID sql.NullInt32) ([]GetSentNotificationsByAdminIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSentNotificationsByAdminID, senderAdminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSentNotificationsByAdminIDRow
	for rows.Next() {
		var i GetSentNotificationsByAdminIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AdminID,
			&i.Subject,
			&i.BookingID,
			&i.Email,
			&i.Message,
			&i.Read,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSentNotificationsByUserID = `-- name: GetSentNotificationsByUserID :many
SELECT n.id, n.user_id, n.subject, n.booking_id, a.email, n.message, n.read, n.created_at
FROM notifications n
JOIN admins a ON n.admin_id = a.id
WHERE n.sender_user_id = $1
ORDER BY n.created_at DESC
`

type GetSentNotificationsByUserIDRow struct {
	ID        int32          `json:"id"`
	UserID    sql.NullInt32  `json:"user_id"`
	Subject   sql.NullString `json:"subject"`
	BookingID int32          `json:"booking_id"`
	Email     string         `json:"email"`
	Message   string         `json:"message"`
	Read      sql.NullBool   `json:"read"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetSentNotificationsByUserID(ctx context.Context, senderUserID sql.NullInt32) ([]GetSentNotificationsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getSentNotificationsByUserID, senderUserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSentNotificationsByUserIDRow
	for rows.Next() {
		var i GetSentNotificationsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Subject,
			&i.BookingID,
			&i.Email,
			&i.Message,
			&i.Read,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadNotificationsByAdminID = `-- name: GetUnreadNotificationsByAdminID :many
SELECT id, admin_id, message, read, email, created_at
FROM notifications
WHERE admin_id = $1 AND read = FALSE
ORDER BY created_at DESC
`

type GetUnreadNotificationsByAdminIDRow struct {
	ID        int32          `json:"id"`
	AdminID   sql.NullInt32  `json:"admin_id"`
	Message   string         `json:"message"`
	Read      sql.NullBool   `json:"read"`
	Email     sql.NullString `json:"email"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetUnreadNotificationsByAdminID(ctx context.Context, adminID sql.NullInt32) ([]GetUnreadNotificationsByAdminIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadNotificationsByAdminID, adminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnreadNotificationsByAdminIDRow
	for rows.Next() {
		var i GetUnreadNotificationsByAdminIDRow
		if err := rows.Scan(
			&i.ID,
			&i.AdminID,
			&i.Message,
			&i.Read,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUnreadNotificationsByUserID = `-- name: GetUnreadNotificationsByUserID :many
SELECT id, user_id, message, read, email, created_at
FROM notifications
WHERE user_id = $1 AND read = FALSE
ORDER BY created_at DESC
`

type GetUnreadNotificationsByUserIDRow struct {
	ID        int32          `json:"id"`
	UserID    sql.NullInt32  `json:"user_id"`
	Message   string         `json:"message"`
	Read      sql.NullBool   `json:"read"`
	Email     sql.NullString `json:"email"`
	CreatedAt sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetUnreadNotificationsByUserID(ctx context.Context, userID sql.NullInt32) ([]GetUnreadNotificationsByUserIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getUnreadNotificationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUnreadNotificationsByUserIDRow
	for rows.Next() {
		var i GetUnreadNotificationsByUserIDRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.Read,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdminNotificationReadStatus = `-- name: UpdateAdminNotificationReadStatus :exec
UPDATE notifications
SET read = COALESCE($3, read)
WHERE id = $1 AND admin_id = $2
RETURNING id, admin_id, message, read, created_at
`

type UpdateAdminNotificationReadStatusParams struct {
	ID      int32         `json:"id"`
	AdminID sql.NullInt32 `json:"admin_id"`
	Read    sql.NullBool  `json:"read"`
}

func (q *Queries) UpdateAdminNotificationReadStatus(ctx context.Context, arg UpdateAdminNotificationReadStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminNotificationReadStatus, arg.ID, arg.AdminID, arg.Read)
	return err
}

const updateNotificationReadStatus = `-- name: UpdateNotificationReadStatus :exec
UPDATE notifications
SET read = COALESCE($3, read)
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, message, read, created_at
`

type UpdateNotificationReadStatusParams struct {
	ID     int32         `json:"id"`
	UserID sql.NullInt32 `json:"user_id"`
	Read   sql.NullBool  `json:"read"`
}

func (q *Queries) UpdateNotificationReadStatus(ctx context.Context, arg UpdateNotificationReadStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateNotificationReadStatus, arg.ID, arg.UserID, arg.Read)
	return err
}
