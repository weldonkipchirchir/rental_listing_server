// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: admin.sql

package db

import (
	"context"
	"database/sql"
)

const createAdmin = `-- name: CreateAdmin :one
INSERT INTO admins (username, email, password_hash)
VALUES ($1, $2, $3)
RETURNING id, username, email, created_at
`

type CreateAdminParams struct {
	Username     string `json:"username"`
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

type CreateAdminRow struct {
	ID        int32        `json:"id"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error) {
	row := q.db.QueryRowContext(ctx, createAdmin, arg.Username, arg.Email, arg.PasswordHash)
	var i CreateAdminRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins
WHERE id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteAdmin, id)
	return err
}

const getAdmin = `-- name: GetAdmin :one
SELECT id, username, email, password_hash, created_at, is_email_verified FROM admins
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetAdmin(ctx context.Context, email string) (Admin, error) {
	row := q.db.QueryRowContext(ctx, getAdmin, email)
	var i Admin
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.PasswordHash,
		&i.CreatedAt,
		&i.IsEmailVerified,
	)
	return i, err
}

const getAdminByID = `-- name: GetAdminByID :one
SELECT id, username, email, created_at
FROM admins
WHERE id = $1
`

type GetAdminByIDRow struct {
	ID        int32        `json:"id"`
	Username  string       `json:"username"`
	Email     string       `json:"email"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) GetAdminByID(ctx context.Context, id int32) (GetAdminByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getAdminByID, id)
	var i GetAdminByIDRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const updateAdminEmailVerified = `-- name: UpdateAdminEmailVerified :exec
UPDATE admins
SET is_email_verified = TRUE
WHERE email = $1
`

func (q *Queries) UpdateAdminEmailVerified(ctx context.Context, email string) error {
	_, err := q.db.ExecContext(ctx, updateAdminEmailVerified, email)
	return err
}

const updateAdminForgotPassword = `-- name: UpdateAdminForgotPassword :exec
UPDATE admins
SET password_hash = $2
WHERE email = $1
`

type UpdateAdminForgotPasswordParams struct {
	Email        string `json:"email"`
	PasswordHash string `json:"password_hash"`
}

func (q *Queries) UpdateAdminForgotPassword(ctx context.Context, arg UpdateAdminForgotPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminForgotPassword, arg.Email, arg.PasswordHash)
	return err
}

const updateAdminPassword = `-- name: UpdateAdminPassword :exec
UPDATE admins
SET
    password_hash = $2,
    username = $3
WHERE id = $1
`

type UpdateAdminPasswordParams struct {
	ID           int32  `json:"id"`
	PasswordHash string `json:"password_hash"`
	Username     string `json:"username"`
}

func (q *Queries) UpdateAdminPassword(ctx context.Context, arg UpdateAdminPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateAdminPassword, arg.ID, arg.PasswordHash, arg.Username)
	return err
}
