// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: verify_user_email.sql

package db

import (
	"context"
	"time"
)

const createVerifyUserEmail = `-- name: CreateVerifyUserEmail :one
INSERT INTO user_verify_emails (username, email, secret_code)
VALUES ($1, $2, $3)
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type CreateVerifyUserEmailParams struct {
	Username   string `json:"username"`
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

func (q *Queries) CreateVerifyUserEmail(ctx context.Context, arg CreateVerifyUserEmailParams) (UserVerifyEmail, error) {
	row := q.db.QueryRowContext(ctx, createVerifyUserEmail, arg.Username, arg.Email, arg.SecretCode)
	var i UserVerifyEmail
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.SecretCode,
		&i.IsUsed,
		&i.CreatedAt,
		&i.ExpiredAt,
	)
	return i, err
}

const getVerifyUserEmail = `-- name: GetVerifyUserEmail :one
SELECT id, username, email, is_used, secret_code, created_at
FROM user_verify_emails
WHERE email = $1 and secret_code = $2
`

type GetVerifyUserEmailParams struct {
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
}

type GetVerifyUserEmailRow struct {
	ID         int64     `json:"id"`
	Username   string    `json:"username"`
	Email      string    `json:"email"`
	IsUsed     bool      `json:"is_used"`
	SecretCode string    `json:"secret_code"`
	CreatedAt  time.Time `json:"created_at"`
}

func (q *Queries) GetVerifyUserEmail(ctx context.Context, arg GetVerifyUserEmailParams) (GetVerifyUserEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getVerifyUserEmail, arg.Email, arg.SecretCode)
	var i GetVerifyUserEmailRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.IsUsed,
		&i.SecretCode,
		&i.CreatedAt,
	)
	return i, err
}

const updateVerifyUserEmail = `-- name: UpdateVerifyUserEmail :exec
UPDATE user_verify_emails
SET is_used = COALESCE($3, is_used)
WHERE email = $1 AND secret_code = $2
RETURNING id, username, email, secret_code, is_used, created_at, expired_at
`

type UpdateVerifyUserEmailParams struct {
	Email      string `json:"email"`
	SecretCode string `json:"secret_code"`
	IsUsed     bool   `json:"is_used"`
}

func (q *Queries) UpdateVerifyUserEmail(ctx context.Context, arg UpdateVerifyUserEmailParams) error {
	_, err := q.db.ExecContext(ctx, updateVerifyUserEmail, arg.Email, arg.SecretCode, arg.IsUsed)
	return err
}
