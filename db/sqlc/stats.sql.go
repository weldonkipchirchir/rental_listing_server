// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: stats.sql

package db

import (
	"context"
	"database/sql"
)

const createStat = `-- name: CreateStat :one
INSERT INTO stats (listing_id, total_views, total_bookings, average_rating)
VALUES ($1, $2, $3, $4)
RETURNING id, listing_id, total_views, total_bookings, average_rating, created_at
`

type CreateStatParams struct {
	ListingID     int32          `json:"listing_id"`
	TotalViews    sql.NullInt32  `json:"total_views"`
	TotalBookings sql.NullInt32  `json:"total_bookings"`
	AverageRating sql.NullString `json:"average_rating"`
}

type CreateStatRow struct {
	ID            int32          `json:"id"`
	ListingID     int32          `json:"listing_id"`
	TotalViews    sql.NullInt32  `json:"total_views"`
	TotalBookings sql.NullInt32  `json:"total_bookings"`
	AverageRating sql.NullString `json:"average_rating"`
	CreatedAt     sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreateStat(ctx context.Context, arg CreateStatParams) (CreateStatRow, error) {
	row := q.db.QueryRowContext(ctx, createStat,
		arg.ListingID,
		arg.TotalViews,
		arg.TotalBookings,
		arg.AverageRating,
	)
	var i CreateStatRow
	err := row.Scan(
		&i.ID,
		&i.ListingID,
		&i.TotalViews,
		&i.TotalBookings,
		&i.AverageRating,
		&i.CreatedAt,
	)
	return i, err
}

const deleteStat = `-- name: DeleteStat :exec
DELETE FROM stats
WHERE id = $1
`

func (q *Queries) DeleteStat(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteStat, id)
	return err
}

const getAllStats = `-- name: GetAllStats :many
SELECT id, listing_id, total_views, total_bookings, average_rating, created_at
FROM stats
ORDER BY created_at DESC
`

type GetAllStatsRow struct {
	ID            int32          `json:"id"`
	ListingID     int32          `json:"listing_id"`
	TotalViews    sql.NullInt32  `json:"total_views"`
	TotalBookings sql.NullInt32  `json:"total_bookings"`
	AverageRating sql.NullString `json:"average_rating"`
	CreatedAt     sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetAllStats(ctx context.Context) ([]GetAllStatsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllStats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllStatsRow
	for rows.Next() {
		var i GetAllStatsRow
		if err := rows.Scan(
			&i.ID,
			&i.ListingID,
			&i.TotalViews,
			&i.TotalBookings,
			&i.AverageRating,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getStatByID = `-- name: GetStatByID :one
SELECT id, listing_id, total_views, total_bookings, average_rating, created_at
FROM stats
WHERE id = $1
`

type GetStatByIDRow struct {
	ID            int32          `json:"id"`
	ListingID     int32          `json:"listing_id"`
	TotalViews    sql.NullInt32  `json:"total_views"`
	TotalBookings sql.NullInt32  `json:"total_bookings"`
	AverageRating sql.NullString `json:"average_rating"`
	CreatedAt     sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetStatByID(ctx context.Context, id int32) (GetStatByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStatByID, id)
	var i GetStatByIDRow
	err := row.Scan(
		&i.ID,
		&i.ListingID,
		&i.TotalViews,
		&i.TotalBookings,
		&i.AverageRating,
		&i.CreatedAt,
	)
	return i, err
}

const getStatsByListingID = `-- name: GetStatsByListingID :one
SELECT id, listing_id, total_views, total_bookings, average_rating, created_at
FROM stats
WHERE listing_id = $1
`

type GetStatsByListingIDRow struct {
	ID            int32          `json:"id"`
	ListingID     int32          `json:"listing_id"`
	TotalViews    sql.NullInt32  `json:"total_views"`
	TotalBookings sql.NullInt32  `json:"total_bookings"`
	AverageRating sql.NullString `json:"average_rating"`
	CreatedAt     sql.NullTime   `json:"created_at"`
}

func (q *Queries) GetStatsByListingID(ctx context.Context, listingID int32) (GetStatsByListingIDRow, error) {
	row := q.db.QueryRowContext(ctx, getStatsByListingID, listingID)
	var i GetStatsByListingIDRow
	err := row.Scan(
		&i.ID,
		&i.ListingID,
		&i.TotalViews,
		&i.TotalBookings,
		&i.AverageRating,
		&i.CreatedAt,
	)
	return i, err
}

const updateStat = `-- name: UpdateStat :exec
UPDATE stats
SET
    total_views = $2,
    total_bookings = $3,
    average_rating = $4
WHERE id = $1
RETURNING id, listing_id, total_views, total_bookings, average_rating, created_at
`

type UpdateStatParams struct {
	ID            int32          `json:"id"`
	TotalViews    sql.NullInt32  `json:"total_views"`
	TotalBookings sql.NullInt32  `json:"total_bookings"`
	AverageRating sql.NullString `json:"average_rating"`
}

func (q *Queries) UpdateStat(ctx context.Context, arg UpdateStatParams) error {
	_, err := q.db.ExecContext(ctx, updateStat,
		arg.ID,
		arg.TotalViews,
		arg.TotalBookings,
		arg.AverageRating,
	)
	return err
}
