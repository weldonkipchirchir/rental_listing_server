// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: favorite.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createFavorite = `-- name: CreateFavorite :one
INSERT INTO favorites (user_id, listing_id)
VALUES ($1, $2)
RETURNING id, user_id, listing_id, created_at
`

type CreateFavoriteParams struct {
	UserID    int32 `json:"user_id"`
	ListingID int32 `json:"listing_id"`
}

func (q *Queries) CreateFavorite(ctx context.Context, arg CreateFavoriteParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, createFavorite, arg.UserID, arg.ListingID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ListingID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteFavorite = `-- name: DeleteFavorite :exec
DELETE FROM favorites
WHERE listing_id = $1 and user_id = $2
`

type DeleteFavoriteParams struct {
	ListingID int32 `json:"listing_id"`
	UserID    int32 `json:"user_id"`
}

func (q *Queries) DeleteFavorite(ctx context.Context, arg DeleteFavoriteParams) error {
	_, err := q.db.ExecContext(ctx, deleteFavorite, arg.ListingID, arg.UserID)
	return err
}

const getFavorite = `-- name: GetFavorite :many
SELECT id, user_id, listing_id, created_at
FROM favorites
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetFavorite(ctx context.Context, userID int32) ([]Favorite, error) {
	rows, err := q.db.QueryContext(ctx, getFavorite, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Favorite
	for rows.Next() {
		var i Favorite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ListingID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getFavoriteByID = `-- name: GetFavoriteByID :one
SELECT id, user_id, listing_id, created_at
FROM favorites
WHERE id = $1 and user_id = $2
`

type GetFavoriteByIDParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetFavoriteByID(ctx context.Context, arg GetFavoriteByIDParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, getFavoriteByID, arg.ID, arg.UserID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ListingID,
		&i.CreatedAt,
	)
	return i, err
}

const getFavoriteByListingID = `-- name: GetFavoriteByListingID :one
SELECT id, user_id, listing_id, created_at
FROM favorites
WHERE listing_id = $1 and user_id = $2
`

type GetFavoriteByListingIDParams struct {
	ListingID int32 `json:"listing_id"`
	UserID    int32 `json:"user_id"`
}

func (q *Queries) GetFavoriteByListingID(ctx context.Context, arg GetFavoriteByListingIDParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, getFavoriteByListingID, arg.ListingID, arg.UserID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ListingID,
		&i.CreatedAt,
	)
	return i, err
}

const getListingFavoriteByUser = `-- name: GetListingFavoriteByUser :one
SELECT id, user_id, listing_id, created_at
FROM favorites
WHERE listing_id = $1 and user_id = $2
`

type GetListingFavoriteByUserParams struct {
	ListingID int32 `json:"listing_id"`
	UserID    int32 `json:"user_id"`
}

func (q *Queries) GetListingFavoriteByUser(ctx context.Context, arg GetListingFavoriteByUserParams) (Favorite, error) {
	row := q.db.QueryRowContext(ctx, getListingFavoriteByUser, arg.ListingID, arg.UserID)
	var i Favorite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ListingID,
		&i.CreatedAt,
	)
	return i, err
}

const searchFavorite = `-- name: SearchFavorite :many
SELECT f.id, l.admin_id, l.title, l.description, l.price, l.location, l.available, l.imageLinks
FROM favorites f
JOIN listings l ON f.listing_id = l.id
WHERE 
    (l.title ILIKE '%' || $1 || '%' OR l.description ILIKE '%' || $1 || '%') 
    AND l.available = TRUE AND f.user_id = $2
ORDER BY f.created_at DESC
`

type SearchFavoriteParams struct {
	Column1 sql.NullString `json:"column_1"`
	UserID  int32          `json:"user_id"`
}

type SearchFavoriteRow struct {
	ID          int32          `json:"id"`
	AdminID     int32          `json:"admin_id"`
	Title       string         `json:"title"`
	Description sql.NullString `json:"description"`
	Price       string         `json:"price"`
	Location    sql.NullString `json:"location"`
	Available   sql.NullBool   `json:"available"`
	Imagelinks  []string       `json:"imagelinks"`
}

func (q *Queries) SearchFavorite(ctx context.Context, arg SearchFavoriteParams) ([]SearchFavoriteRow, error) {
	rows, err := q.db.QueryContext(ctx, searchFavorite, arg.Column1, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SearchFavoriteRow
	for rows.Next() {
		var i SearchFavoriteRow
		if err := rows.Scan(
			&i.ID,
			&i.AdminID,
			&i.Title,
			&i.Description,
			&i.Price,
			&i.Location,
			&i.Available,
			pq.Array(&i.Imagelinks),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
