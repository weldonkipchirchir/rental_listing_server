// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: reviews.sql

package db

import (
	"context"
	"database/sql"
)

const createReview = `-- name: CreateReview :one
INSERT INTO reviews (user_id, listing_id, rating, comment)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, listing_id, rating, comment, created_at
`

type CreateReviewParams struct {
	UserID    int32          `json:"user_id"`
	ListingID int32          `json:"listing_id"`
	Rating    int32          `json:"rating"`
	Comment   sql.NullString `json:"comment"`
}

func (q *Queries) CreateReview(ctx context.Context, arg CreateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, createReview,
		arg.UserID,
		arg.ListingID,
		arg.Rating,
		arg.Comment,
	)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ListingID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE id = $1 and user_id = $2
`

type DeleteReviewParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.ExecContext(ctx, deleteReview, arg.ID, arg.UserID)
	return err
}

const getListingReviews = `-- name: GetListingReviews :many
SELECT r.id, r.user_id, r.listing_id, r.rating, r.comment, r.created_at, u.username
FROM reviews r
JOIN listings l ON r.listing_id = l.id
JOIN users u ON r.user_id = u.id
WHERE listing_id = $1
`

type GetListingReviewsRow struct {
	ID        int32          `json:"id"`
	UserID    int32          `json:"user_id"`
	ListingID int32          `json:"listing_id"`
	Rating    int32          `json:"rating"`
	Comment   sql.NullString `json:"comment"`
	CreatedAt sql.NullTime   `json:"created_at"`
	Username  string         `json:"username"`
}

func (q *Queries) GetListingReviews(ctx context.Context, listingID int32) ([]GetListingReviewsRow, error) {
	rows, err := q.db.QueryContext(ctx, getListingReviews, listingID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetListingReviewsRow
	for rows.Next() {
		var i GetListingReviewsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ListingID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
			&i.Username,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReviewByID = `-- name: GetReviewByID :one
SELECT id, user_id, listing_id, rating, comment, created_at
FROM reviews
WHERE id = $1 and user_id = $2
`

type GetReviewByIDParams struct {
	ID     int32 `json:"id"`
	UserID int32 `json:"user_id"`
}

func (q *Queries) GetReviewByID(ctx context.Context, arg GetReviewByIDParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReviewByID, arg.ID, arg.UserID)
	var i Review
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ListingID,
		&i.Rating,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const getReviewsByListingID = `-- name: GetReviewsByListingID :many
SELECT r.id, r.user_id, r.listing_id, r.rating, r.comment, r.created_at
FROM reviews r
JOIN listings l ON r.listing_id = l.id
WHERE listing_id = $1 AND admin_id= $2
`

type GetReviewsByListingIDParams struct {
	ListingID int32 `json:"listing_id"`
	AdminID   int32 `json:"admin_id"`
}

func (q *Queries) GetReviewsByListingID(ctx context.Context, arg GetReviewsByListingIDParams) ([]Review, error) {
	rows, err := q.db.QueryContext(ctx, getReviewsByListingID, arg.ListingID, arg.AdminID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Review
	for rows.Next() {
		var i Review
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ListingID,
			&i.Rating,
			&i.Comment,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
